./configure \
--with-cc-opt='-g -O2 -ffile-prefix-map=/build/nginx-QEo1nc/${NGINX_VERSION}=. -flto=auto -ffat-lto-objects -flto=auto -ffat-lto-objects -fstack-protector-strong -Wformat -Werror=format-security -fPIC -flto -ffat-lto-objects -Wdate-time -D_FORTIFY_SOURCE=2' \
--with-ld-opt='-Wl,-Bsymbolic-functions -flto=auto -ffat-lto-objects -flto=auto -Wl,-z,relro -fPIC -flto -ffat-lto-objects' \
--prefix=/usr/share/nginx \
--conf-path=/etc/nginx/nginx.conf \
--http-log-path=/var/log/nginx/access.log \
--error-log-path=/var/log/nginx/error.log \
--lock-path=/var/lock/nginx.lock \
--pid-path=/run/nginx.pid \
--http-client-body-temp-path=/var/lib/nginx/body \
--http-fastcgi-temp-path=/var/lib/nginx/fastcgi \
--http-proxy-temp-path=/var/lib/nginx/proxy \
--http-scgi-temp-path=/var/lib/nginx/scgi \
--http-uwsgi-temp-path=/var/lib/nginx/uwsgi \ 
--build='WordOps Nginx-wo' \
--with-debug \
--with-pcre-jit \
--with-file-aio \
--with-threads \
--with-http_ssl_module \
--with-http_v2_module \
--with-http_stub_status_module \
--with-http_realip_module \
--with-http_auth_request_module \
--with-openssl-opt='zlib enable-ec_nistp_64_gcc_128 enable-tls1_3 no-ssl3-method -fPIC' \
--with-http_addition_module \
--with-http_geoip_module \
--with-http_gzip_static_module \
--with-http_mp4_module \
--with-http_sub_module \
--with-http_xslt_module \
--without-http_memcached_module \
--add-module=/build/nginx-QEo1nc/${NGINX_VERSION}/debian/modules/headers-more-nginx-module \
--add-module=/build/nginx-QEo1nc/${NGINX_VERSION}/debian/modules/nginx-auth-pam \
--add-module=/build/nginx-QEo1nc/${NGINX_VERSION}/debian/modules/nginx-cache-purge \
--add-module=/build/nginx-QEo1nc/${NGINX_VERSION}/debian/modules/nginx-echo \
--add-module=/build/nginx-QEo1nc/${NGINX_VERSION}/debian/modules/nginx-upstream-fair \
--add-module=/build/nginx-QEo1nc/${NGINX_VERSION}/debian/modules/ngx_http_substitutions_filter_module \
--add-module=/build/nginx-QEo1nc/${NGINX_VERSION}/debian/modules/memc-nginx-module \
--add-module=/build/nginx-QEo1nc/${NGINX_VERSION}/debian/modules/srcache-nginx-module \
--add-module=/build/nginx-QEo1nc/${NGINX_VERSION}/debian/modules/HttpRedisModule \
--add-module=/build/nginx-QEo1nc/${NGINX_VERSION}/debian/modules/redis2-nginx-module \
--add-module=/build/nginx-QEo1nc/${NGINX_VERSION}/debian/modules/ngx_devel_kit \
--add-module=/build/nginx-QEo1nc/${NGINX_VERSION}/debian/modules/set-misc-nginx-module \
--add-module=/build/nginx-QEo1nc/${NGINX_VERSION}/debian/modules/nginx-module-vts \
--add-module=/build/nginx-QEo1nc/${NGINX_VERSION}/debian/modules/ngx_brotli



FROM alpine

RUN \
    apk update && \
    apk upgrade

RUN \
    mkdir -p /var/lib/nginx/body && \
    mkdir -p /var/lib/nginx/fastcgi && \
    mkdir -p /var/lib/nginx/proxy && \
    mkdir -p /var/lib/nginx/scgi && \
    mkdir -p /var/lib/nginx/uwsgi

 RUN \
    build_pkgs="build-base linux-headers openssl-dev pcre-dev wget zlib-dev git curl\
                libxslt-dev libxml2-dev geoip-dev gettext" && \
    runtime_pkgs="ca-certificates openssl pcre zlib tzdata" && \
    apk --no-cache --virtual add ${build_pkgs} ${runtime_pkgs}

ENV NGINX_VERSION=nginx-1.23.3

RUN \
    mkdir -p /tmp/src && \
    cd /tmp/src && \
    wget http://nginx.org/download/${NGINX_VERSION}.tar.gz && \
    git clone https://github.com/openresty/headers-more-nginx-module.git && \
    git clone https://github.com/nginx-modules/nginx-module-vts.git && \
    git clone https://github.com/yaoweibin/ngx_http_substitutions_filter_module.git && \
    git clone https://github.com/sto/ngx_http_auth_pam_module.git && \
    git clone https://github.com/FRiCKLE/ngx_cache_purge.git && \
    git clone https://github.com/google/ngx_brotli.git && \
    git clone https://github.com/cep21/healthcheck_nginx_upstreams.git && \
    tar -zxvf ${NGINX_VERSION}.tar.gz && \
    cd /tmp/src/${NGINX_VERSION} && \
    ./configure \
        --prefix=/usr/share/nginx \
        --conf-path=/etc/nginx/nginx.conf \
        --http-log-path=/var/log/nginx/access.log \
        --error-log-path=/var/log/nginx/error.log \
        --lock-path=/var/lock/nginx.lock \
        --pid-path=/run/nginx.pid \
        --http-client-body-temp-path=/var/lib/nginx/body \
        --http-fastcgi-temp-path=/var/lib/nginx/fastcgi \
        --http-proxy-temp-path=/var/lib/nginx/proxy \
        --http-scgi-temp-path=/var/lib/nginx/scgi \
        --http-uwsgi-temp-path=/var/lib/nginx/uwsgi \
        --with-debug \
        --with-pcre-jit \
        --with-file-aio \
        --with-threads \
        --with-http_ssl_module \
        --with-http_v2_module \
        --with-http_stub_status_module \
        --with-http_realip_module \
        --with-http_auth_request_module \
        --with-openssl-opt='zlib enable-ec_nistp_64_gcc_128 enable-tls1_3 no-ssl3-method -fPIC' \
        --with-http_addition_module \
        --with-http_geoip_module \
        --with-http_gzip_static_module \
        --with-http_mp4_module \
        --with-http_sub_module \
        --with-http_xslt_module  \
        --without-http_memcached_module \
        --add-module=/tmp/src/ngx_http_substitutions_filter_module \
        --add-module=/tmp/src/ngx_cache_purge \
        --add-dynamic-module=/tmp/src/nginx-module-vts \
        --add-dynamic-module=/tmp/src/headers-more-nginx-module && \
    make && \
    make install && \    
    mkdir -p /etc/nginx/servers

# Create the directory where the content's going to be placed
RUN \
    adduser -D -S -G 'www-data' -h /var/www www-data && \
    mkdir -p /var/www/beyonder && \
    chown -R www-data:www-data /var/www && \
    chmod -R 754 /var/www

ADD https://raw.githubusercontent.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/master/install-ngxblocker /usr/local/sbin/install-ngxblocker

RUN chmod +x /usr/local/sbin/install-ngxblocker && \
    install-ngxblocker -x && \
    chmod +x /usr/local/sbin/*ngxblocker && \ 
    setup-ngxblocker -x

ENV PATH=$PATH:/usr/share/nginx/sbin

RUN mkdir -p /docker-entrypoint.d

COPY entrypoint/docker-entrypoint.sh /
RUN chmod +x /docker-entrypoint.sh
COPY entrypoint/10-listen-on-ipv6-by-default.sh /docker-entrypoint.d
COPY entrypoint/20-envsubst-on-templates.sh /docker-entrypoint.d
COPY entrypoint/30-tune-worker-processes.sh /docker-entrypoint.d
RUN chmod +x /docker-entrypoint.d/*.sh
ENTRYPOINT ["/docker-entrypoint.sh"]

RUN cd / && \
    apk del ${build_pkgs} && \
#    rm -rf /tmp/src && \
    rm -rf /var/cache/apk/*

WORKDIR /etc/nginx

STOPSIGNAL SIGQUIT

CMD ["nginx", "-g", "daemon off;"]

